<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hampus Sandén</title>
    <link>https://hampussanden.com/</link>
    <description>Recent content on Hampus Sandén</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Mar 2018 11:53:49 -0700</lastBuildDate>
    
	<atom:link href="https://hampussanden.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Columns Shared By Two Data Frames</title>
      <link>https://hampussanden.com/python/data_wrangling/columns_shared_by_two_data_frames/</link>
      <pubDate>Mon, 12 Mar 2018 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/columns_shared_by_two_data_frames/</guid>
      <description>Preliminaries # Import library import pandas as pd Create Data Frames # Create a data frame dataframe_one = pd.DataFrame() dataframe_one[&amp;#39;1&amp;#39;] = [&amp;#39;1&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;1&amp;#39;] dataframe_one[&amp;#39;B&amp;#39;] = [&amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;] # Create a second data frame dataframe_two = pd.DataFrame() dataframe_two[&amp;#39;2&amp;#39;] = [&amp;#39;2&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;2&amp;#39;] dataframe_two[&amp;#39;B&amp;#39;] = [&amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;] Find Shared Columns # Convert each data frame&amp;#39;s columns into sets, then find # the intersection of those two sets. This will be the # set of columns shared by both data frames.</description>
    </item>
    
    <item>
      <title>About Hampus Sandén</title>
      <link>https://hampussanden.com/about/hampus_sanden/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/about/hampus_sanden/</guid>
      <description>I am a data scientist and machine learning engineer formally trained as a quantitative political scientist. I am the Director of Data Science at Devoted Health, using data science and machine learning to help fix America&amp;rsquo;s health care system. Previously, I was Chief Data Scientist at the Kenyan startup BRCK, founded the AI company New Knowledge, cohosted the data science podcast Partially Derivative, led the humanitarian non-profit Ushahidi&amp;rsquo;s work on crisis data, and was the director of the low-resource technology governance project at FrontlineSMS.</description>
    </item>
    
    <item>
      <title>Apply Functions By Group In Pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_apply_function_by_group/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_apply_function_by_group/</guid>
      <description>Preliminaries # import pandas as pd import pandas as pd Create a simulated dataset # Create an example dataframe data = {&amp;#39;Platoon&amp;#39;: [&amp;#39;A&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;C&amp;#39;], &amp;#39;Casualties&amp;#39;: [1,4,5,7,5,5,6,1,4,5,6,7,4,6,4,6]} df = pd.DataFrame(data) df    Casualties Platoon     0 1 A   1 4 A   2 5 A   3 7 A   4 5 A   5 5 A   6 6 B   7 1 B   8 4 B   9 5 B   10 6 B   11 7 C   12 4 C   13 6 C   14 4 C   15 6 C     Apply A Function (Rolling Mean) To The DataFrame, By Group # Group df by df.</description>
    </item>
    
    <item>
      <title>Apply Operations To Groups In Pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_apply_operations_to_groups/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_apply_operations_to_groups/</guid>
      <description>Preliminaries # import modules import pandas as pd# Create dataframe raw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;,&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;], &amp;#39;name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]} df = pd.</description>
    </item>
    
    <item>
      <title>Applying Functions To List Items</title>
      <link>https://hampussanden.com/python/basics/applying_functions_to_list_items/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/basics/applying_functions_to_list_items/</guid>
      <description>Create a list of regiment names regimentNames = [&amp;#39;Night Riflemen&amp;#39;, &amp;#39;Jungle Scouts&amp;#39;, &amp;#39;The Dragoons&amp;#39;, &amp;#39;Midnight Revengence&amp;#39;, &amp;#39;Wily Warriors&amp;#39;] Using A For Loop Create a for loop goes through the list and capitalizes each # create a variable for the for loop results regimentNamesCapitalized_f = [] # for every item in regimentNames for i in regimentNames: # capitalize the item and add it to regimentNamesCapitalized_f regimentNamesCapitalized_f.append(i.upper()) # View the outcome regimentNamesCapitalized_f [&#39;NIGHT RIFLEMEN&#39;, &#39;JUNGLE SCOUTS&#39;, &#39;THE DRAGOONS&#39;, &#39;MIDNIGHT REVENGENCE&#39;, &#39;WILY WARRIORS&#39;]  Using Map() Create a lambda function that capitalizes x capitalizer = lambda x: x.</description>
    </item>
    
    <item>
      <title>Applying Operations Over pandas Dataframes</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_apply_operations_to_dataframes/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_apply_operations_to_dataframes/</guid>
      <description>Import Modules import pandas as pd import numpy as np Create a dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;coverage&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    coverage name reports year     Cochice 25 Jason 4 2012   Pima 94 Molly 24 2012   Santa Cruz 57 Tina 31 2013   Maricopa 62 Jake 2 2014   Yuma 70 Amy 3 2014     Create a capitalization lambda function capitalizer = lambda x: x.</description>
    </item>
    
    <item>
      <title>Assign A New Column To A Pandas DataFrame</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_assign_new_column_dataframe/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_assign_new_column_dataframe/</guid>
      <description> Preliminaries import pandas as pd Create Dataframe # Create empty dataframe df = pd.DataFrame() # Create a column df[&amp;#39;name&amp;#39;] = [&amp;#39;John&amp;#39;, &amp;#39;Steve&amp;#39;, &amp;#39;Sarah&amp;#39;] # View dataframe df    name     0 John   1 Steve   2 Sarah     Assign New Column To Dataframe # Assign a new column to df called &amp;#39;age&amp;#39; with a list of ages df.assign(age = [31, 32, 19])    name age     0 John 31   1 Steve 32   2 Sarah 19     </description>
    </item>
    
    <item>
      <title>Back To Back Bar Plot In MatPlotLib</title>
      <link>https://hampussanden.com/python/data_visualization/matplotlib_back_to_back_bar_plot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/matplotlib_back_to_back_bar_plot/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;pre_score&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;mid_score&amp;#39;: [25, 94, 57, 62, 70], &amp;#39;post_score&amp;#39;: [5, 43, 23, 23, 51]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;pre_score&amp;#39;, &amp;#39;mid_score&amp;#39;, &amp;#39;post_score&amp;#39;]) df    first_name pre_score mid_score post_score     0 Jason 4 25 5   1 Molly 24 94 43   2 Tina 31 57 23   3 Jake 2 62 23   4 Amy 3 70 51     Make plot # input data, specifically the second and  # third rows, skipping the first column x1 = df.</description>
    </item>
    
    <item>
      <title>Bar Plot In MatPlotLib</title>
      <link>https://hampussanden.com/python/data_visualization/matplotlib_bar_plot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/matplotlib_bar_plot/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;pre_score&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;mid_score&amp;#39;: [25, 94, 57, 62, 70], &amp;#39;post_score&amp;#39;: [5, 43, 23, 23, 51]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;pre_score&amp;#39;, &amp;#39;mid_score&amp;#39;, &amp;#39;post_score&amp;#39;]) df    first_name pre_score mid_score post_score     0 Jason 4 25 5   1 Molly 24 94 43   2 Tina 31 57 23   3 Jake 2 62 23   4 Amy 3 70 51     Make plot # Create a list of the mean scores for each variable mean_values = [df[&amp;#39;pre_score&amp;#39;].</description>
    </item>
    
    <item>
      <title>Break A List Into N-Sized Chunks</title>
      <link>https://hampussanden.com/python/data_wrangling/break_list_into_chunks_of_equal_size/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/break_list_into_chunks_of_equal_size/</guid>
      <description>In this snippet we take a list and break it up into n-size chunks. This is a very common practice when dealing with APIs that have a maximum request size.
Credit for this nifty function goes to Ned Batchelder who posted it on StackOverflow.
# Create a list of first names first_names = [&amp;#39;Steve&amp;#39;, &amp;#39;Jane&amp;#39;, &amp;#39;Sara&amp;#39;, &amp;#39;Mary&amp;#39;,&amp;#39;Jack&amp;#39;,&amp;#39;Bob&amp;#39;, &amp;#39;Bily&amp;#39;, &amp;#39;Boni&amp;#39;, &amp;#39;Chris&amp;#39;,&amp;#39;Sori&amp;#39;, &amp;#39;Will&amp;#39;, &amp;#39;Won&amp;#39;,&amp;#39;Li&amp;#39;]# Create a function called &amp;#34;chunks&amp;#34; with two arguments, l and n: def chunks(l, n): # For item i in a range that is a length of l, for i in range(0, len(l), n): # Create an index range for l of n items: yield l[i:i+n]# Create a list that from the results of the function chunks: list(chunks(first_names, 5)) [[&#39;Steve&#39;, &#39;Jane&#39;, &#39;Sara&#39;, &#39;Mary&#39;, &#39;Jack&#39;], [&#39;Bob&#39;, &#39;Bily&#39;, &#39;Boni&#39;, &#39;Chris&#39;, &#39;Sori&#39;], [&#39;Will&#39;, &#39;Won&#39;, &#39;Li&#39;]]  </description>
    </item>
    
    <item>
      <title>Breaking Up A String Into Columns Using Regex In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_regex_to_create_columns/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_regex_to_create_columns/</guid>
      <description>Import modules import re import pandas as pd Create a dataframe of raw strings # Create a dataframe with a single column of strings data = {&amp;#39;raw&amp;#39;: [&amp;#39;Arizona 1 2014-12-23 3242.0&amp;#39;, &amp;#39;Iowa 1 2010-02-23 3453.7&amp;#39;, &amp;#39;Oregon 0 2014-06-20 2123.0&amp;#39;, &amp;#39;Maryland 0 2014-03-14 1123.6&amp;#39;, &amp;#39;Florida 1 2013-01-15 2134.0&amp;#39;, &amp;#39;Georgia 0 2012-07-14 2345.6&amp;#39;]} df = pd.DataFrame(data, columns = [&amp;#39;raw&amp;#39;]) df    raw     0 Arizona 1 2014-12-23 3242.</description>
    </item>
    
    <item>
      <title>Color Palettes in Seaborn</title>
      <link>https://hampussanden.com/python/data_visualization/seaborn_color_palettes/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/seaborn_color_palettes/</guid>
      <description>Preliminaries import pandas as pd %matplotlib inline import matplotlib.pyplot as plt import seaborn as snsdata = {&amp;#39;date&amp;#39;: [&amp;#39;2014-05-01 18:47:05.069722&amp;#39;, &amp;#39;2014-05-01 18:47:05.119994&amp;#39;, &amp;#39;2014-05-02 18:47:05.178768&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.280592&amp;#39;, &amp;#39;2014-05-03 18:47:05.332662&amp;#39;, &amp;#39;2014-05-03 18:47:05.385109&amp;#39;, &amp;#39;2014-05-04 18:47:05.436523&amp;#39;, &amp;#39;2014-05-04 18:47:05.486877&amp;#39;], &amp;#39;deaths_regiment_1&amp;#39;: [34, 43, 14, 15, 15, 14, 31, 25, 62, 41], &amp;#39;deaths_regiment_2&amp;#39;: [52, 66, 78, 15, 15, 5, 25, 25, 86, 1], &amp;#39;deaths_regiment_3&amp;#39;: [13, 73, 82, 58, 52, 87, 26, 5, 56, 75], &amp;#39;deaths_regiment_4&amp;#39;: [44, 75, 26, 15, 15, 14, 54, 25, 24, 72], &amp;#39;deaths_regiment_5&amp;#39;: [25, 24, 25, 15, 57, 68, 21, 27, 62, 5], &amp;#39;deaths_regiment_6&amp;#39;: [84, 84, 26, 15, 15, 14, 26, 25, 62, 24], &amp;#39;deaths_regiment_7&amp;#39;: [46, 57, 26, 15, 15, 14, 26, 25, 62, 41]} df = pd.</description>
    </item>
    
    <item>
      <title>Construct A Dictionary From Multiple Lists</title>
      <link>https://hampussanden.com/python/data_wrangling/construct_a_dictionary_from_multiple_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/construct_a_dictionary_from_multiple_lists/</guid>
      <description> Create Two Lists # Create a list of theofficer&amp;#39;s name officer_names = [&amp;#39;Sodoni Dogla&amp;#39;, &amp;#39;Chris Jefferson&amp;#39;, &amp;#39;Jessica Billars&amp;#39;, &amp;#39;Michael Mulligan&amp;#39;, &amp;#39;Steven Johnson&amp;#39;] # Create a list of the officer&amp;#39;s army officer_armies = [&amp;#39;Purple Army&amp;#39;, &amp;#39;Orange Army&amp;#39;, &amp;#39;Green Army&amp;#39;, &amp;#39;Red Army&amp;#39;, &amp;#39;Blue Army&amp;#39;] Construct A Dictionary From The Two Lists # Create a dictionary that is the zip of the two lists dict(zip(officer_names, officer_armies)) {&#39;Chris Jefferson&#39;: &#39;Orange Army&#39;, &#39;Jessica Billars&#39;: &#39;Green Army&#39;, &#39;Michael Mulligan&#39;: &#39;Red Army&#39;, &#39;Sodoni Dogla&#39;: &#39;Purple Army&#39;, &#39;Steven Johnson&#39;: &#39;Blue Army&#39;}  </description>
    </item>
    
    <item>
      <title>Convert A CSV Into Python Code To Recreate It</title>
      <link>https://hampussanden.com/python/data_wrangling/csv_to_python_code/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/csv_to_python_code/</guid>
      <description>Preliminaries # Import the pandas package import pandas as pd Load the external dataset # Load the csv file as a pandas dataframe df_original = pd.read_csv(&amp;#39;http://vincentarelbundock.github.io/Rdatasets/csv/datasets/iris.csv&amp;#39;) df = pd.read_csv(&amp;#39;http://vincentarelbundock.github.io/Rdatasets/csv/datasets/iris.csv&amp;#39;) Print the code required to create that dataset # Print the code to create the dataframe print(&amp;#39;==============================&amp;#39;) print(&amp;#39;RUN THE CODE BELOW THIS LINE&amp;#39;) print(&amp;#39;==============================&amp;#39;) print(&amp;#39;raw_data =&amp;#39;, df.to_dict(orient=&amp;#39;list&amp;#39;)) print(&amp;#39;df = pd.DataFrame(raw_data, columns = &amp;#39; + str(list(df_original)) + &amp;#39;)&amp;#39;) ============================== RUN THE CODE BELOW THIS LINE ============================== raw_data = {&#39;Sepal.</description>
    </item>
    
    <item>
      <title>Convert A Categorical Variable Into Dummy Variables</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_convert_categorical_to_dummies/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_convert_categorical_to_dummies/</guid>
      <description># import modules import pandas as pd# Create a dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;sex&amp;#39;: [&amp;#39;male&amp;#39;, &amp;#39;female&amp;#39;, &amp;#39;male&amp;#39;, &amp;#39;female&amp;#39;, &amp;#39;female&amp;#39;]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;sex&amp;#39;]) df    first_name last_name sex     0 Jason Miller male   1 Molly Jacobson female   2 Tina Ali male   3 Jake Milner female   4 Amy Cooze female     # Create a set of dummy variables from the sex variable df_sex = pd.</description>
    </item>
    
    <item>
      <title>Convert A Categorical Variable Into Dummy Variables</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_convert_numeric_categorical_to_numeric_with_patsy/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_convert_numeric_categorical_to_numeric_with_patsy/</guid>
      <description># import modules import pandas as pd import patsy# Create dataframe raw_data = {&amp;#39;countrycode&amp;#39;: [1, 2, 3, 2, 1]} df = pd.DataFrame(raw_data, columns = [&amp;#39;countrycode&amp;#39;]) df    countrycode     0 1   1 2   2 3   3 2   4 1     # Convert the countrycode variable into three binary variables patsy.dmatrix(&amp;#39;C(countrycode)-1&amp;#39;, df, return_type=&amp;#39;dataframe&amp;#39;)    C(countrycode)[1] C(countrycode)[2] C(countrycode)[3]     0 1.</description>
    </item>
    
    <item>
      <title>Convert A String Categorical Variable To A Numeric Variable</title>
      <link>https://hampussanden.com/python/data_wrangling/convert_categorical_to_numeric/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/convert_categorical_to_numeric/</guid>
      <description>import modules import pandas as pd Create dataframe raw_data = {&amp;#39;patient&amp;#39;: [1, 1, 1, 2, 2], &amp;#39;obs&amp;#39;: [1, 2, 3, 1, 2], &amp;#39;treatment&amp;#39;: [0, 1, 0, 1, 0], &amp;#39;score&amp;#39;: [&amp;#39;strong&amp;#39;, &amp;#39;weak&amp;#39;, &amp;#39;normal&amp;#39;, &amp;#39;weak&amp;#39;, &amp;#39;strong&amp;#39;]} df = pd.DataFrame(raw_data, columns = [&amp;#39;patient&amp;#39;, &amp;#39;obs&amp;#39;, &amp;#39;treatment&amp;#39;, &amp;#39;score&amp;#39;]) df    patient obs treatment score     0 1 1 0 strong   1 1 2 1 weak   2 1 3 0 normal   3 2 1 1 weak   4 2 2 0 strong     Create a function that converts all values of df[&#39;score&#39;] into numbers def score_to_numeric(x): if x==&amp;#39;strong&amp;#39;: return 3 if x==&amp;#39;normal&amp;#39;: return 2 if x==&amp;#39;weak&amp;#39;: return 1 Apply the function to the score variable df[&amp;#39;score_num&amp;#39;] = df[&amp;#39;score&amp;#39;].</description>
    </item>
    
    <item>
      <title>Convert A Variable To A Time Variable In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_convert_to_datetime/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_convert_to_datetime/</guid>
      <description># Import Preliminaries import pandas as pd# Create a dataset with the index being a set of names raw_data = {&amp;#39;date&amp;#39;: [&amp;#39;2014-06-01T01:21:38.004053&amp;#39;, &amp;#39;2014-06-02T01:21:38.004053&amp;#39;, &amp;#39;2014-06-03T01:21:38.004053&amp;#39;], &amp;#39;score&amp;#39;: [25, 94, 57]} df = pd.DataFrame(raw_data, columns = [&amp;#39;date&amp;#39;, &amp;#39;score&amp;#39;]) df    date score     0 2014-06-01T01:21:38.004053 25   1 2014-06-02T01:21:38.004053 94   2 2014-06-03T01:21:38.004053 57     # Transpose the dataset, so that the index (in this case the names) are columns df[&amp;#34;date&amp;#34;] = pd.</description>
    </item>
    
    <item>
      <title>Count Values In Pandas Dataframe</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_dataframe_count_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_dataframe_count_values/</guid>
      <description>Import the pandas module import pandas as pd Create all the columns of the dataframe as series year = pd.Series([1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894]) guardCorps = pd.Series([0,2,2,1,0,0,1,1,0,3,0,2,1,0,0,1,0,1,0,1]) corps1 = pd.Series([0,0,0,2,0,3,0,2,0,0,0,1,1,1,0,2,0,3,1,0]) corps2 = pd.Series([0,0,0,2,0,2,0,0,1,1,0,0,2,1,1,0,0,2,0,0]) corps3 = pd.Series([0,0,0,1,1,1,2,0,2,0,0,0,1,0,1,2,1,0,0,0]) corps4 = pd.Series([0,1,0,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0]) corps5 = pd.Series([0,0,0,0,2,1,0,0,1,0,0,1,0,1,1,1,1,1,1,0]) corps6 = pd.Series([0,0,1,0,2,0,0,1,2,0,1,1,3,1,1,1,0,3,0,0]) corps7 = pd.Series([1,0,1,0,0,0,1,0,1,1,0,0,2,0,0,2,1,0,2,0]) corps8 = pd.Series([1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1]) corps9 = pd.Series([0,0,0,0,0,2,1,1,1,0,2,1,1,0,1,2,0,1,0,0]) corps10 = pd.</description>
    </item>
    
    <item>
      <title>Create A Pipeline In Pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_create_pipeline/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_create_pipeline/</guid>
      <description>Pandas&amp;rsquo; pipeline feature allows you to string together Python functions in order to build a pipeline of data processing.
Preliminaries import pandas as pd Create Dataframe # Create empty dataframe df = pd.DataFrame() # Create a column df[&amp;#39;name&amp;#39;] = [&amp;#39;John&amp;#39;, &amp;#39;Steve&amp;#39;, &amp;#39;Sarah&amp;#39;] df[&amp;#39;gender&amp;#39;] = [&amp;#39;Male&amp;#39;, &amp;#39;Male&amp;#39;, &amp;#39;Female&amp;#39;] df[&amp;#39;age&amp;#39;] = [31, 32, 19] # View dataframe df    name gender age     0 John Male 31   1 Steve Male 32   2 Sarah Female 19     Create Functions To Process Data # Create a function that def mean_age_by_group(dataframe, col): # groups the data by a column and returns the mean age per group return dataframe.</description>
    </item>
    
    <item>
      <title>Create A pandas Column With A For Loop</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_create_column_with_loop/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_create_column_with_loop/</guid>
      <description>Preliminaries import pandas as pd import numpy as np Create an example dataframe raw_data = {&amp;#39;student_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;test_score&amp;#39;: [76, 88, 84, 67, 53, 96, 64, 91, 77, 73, 52, np.NaN]} df = pd.DataFrame(raw_data, columns = [&amp;#39;student_name&amp;#39;, &amp;#39;test_score&amp;#39;]) Create a function to assign letter grades # Create a list to store the data grades = [] # For each row in the column, for row in df[&amp;#39;test_score&amp;#39;]: # if more than a value, if row &amp;gt; 95: # Append a letter grade grades.</description>
    </item>
    
    <item>
      <title>Create Counts Of Items</title>
      <link>https://hampussanden.com/python/data_wrangling/creating_counts_of_items/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/creating_counts_of_items/</guid>
      <description>Preliminaries from collections import Counter Create A Counter # Create a counter of the fruits eaten today fruit_eaten = Counter([&amp;#39;Apple&amp;#39;, &amp;#39;Apple&amp;#39;, &amp;#39;Apple&amp;#39;, &amp;#39;Banana&amp;#39;, &amp;#39;Pear&amp;#39;, &amp;#39;Pineapple&amp;#39;]) # View counter fruit_eaten Counter({&#39;Apple&#39;: 3, &#39;Banana&#39;: 1, &#39;Pear&#39;: 1, &#39;Pineapple&#39;: 1})  Update The Count For An Element # Update the count for &amp;#39;Pineapple&amp;#39; (because you just ate an pineapple) fruit_eaten.update([&amp;#39;Pineapple&amp;#39;]) # View the counter fruit_eaten Counter({&#39;Apple&#39;: 3, &#39;Banana&#39;: 1, &#39;Pear&#39;: 1, &#39;Pineapple&#39;: 2})  View The Items With The Highest Counts # View the items with the top 3 counts fruit_eaten.</description>
    </item>
    
    <item>
      <title>Create a Column Based on a Conditional in pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_create_column_using_conditional/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_create_column_using_conditional/</guid>
      <description>Preliminaries # Import required modules import pandas as pd import numpy as np Make a dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(data, columns = [&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    name age preTestScore postTestScore     0 Jason 42 4 25   1 Molly 52 24 94   2 Tina 36 31 57   3 Jake 24 2 62   4 Amy 73 3 70     Add a new column for elderly # Create a new column called df.</description>
    </item>
    
    <item>
      <title>Creating A Time Series Plot With Seaborn And pandas</title>
      <link>https://hampussanden.com/python/data_visualization/seaborn_pandas_timeseries_plot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/seaborn_pandas_timeseries_plot/</guid>
      <description>Preliminaries import pandas as pd %matplotlib inline import matplotlib.pyplot as plt import seaborn as snsdata = {&amp;#39;date&amp;#39;: [&amp;#39;2014-05-01 18:47:05.069722&amp;#39;, &amp;#39;2014-05-01 18:47:05.119994&amp;#39;, &amp;#39;2014-05-02 18:47:05.178768&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.280592&amp;#39;, &amp;#39;2014-05-03 18:47:05.332662&amp;#39;, &amp;#39;2014-05-03 18:47:05.385109&amp;#39;, &amp;#39;2014-05-04 18:47:05.436523&amp;#39;, &amp;#39;2014-05-04 18:47:05.486877&amp;#39;], &amp;#39;deaths_regiment_1&amp;#39;: [34, 43, 14, 15, 15, 14, 31, 25, 62, 41], &amp;#39;deaths_regiment_2&amp;#39;: [52, 66, 78, 15, 15, 5, 25, 25, 86, 1], &amp;#39;deaths_regiment_3&amp;#39;: [13, 73, 82, 58, 52, 87, 26, 5, 56, 75], &amp;#39;deaths_regiment_4&amp;#39;: [44, 75, 26, 15, 15, 14, 54, 25, 24, 72], &amp;#39;deaths_regiment_5&amp;#39;: [25, 24, 25, 15, 57, 68, 21, 27, 62, 5], &amp;#39;deaths_regiment_6&amp;#39;: [84, 84, 26, 15, 15, 14, 26, 25, 62, 24], &amp;#39;deaths_regiment_7&amp;#39;: [46, 57, 26, 15, 15, 14, 26, 25, 62, 41]} df = pd.</description>
    </item>
    
    <item>
      <title>Creating Lists From Dictionary Keys And Values</title>
      <link>https://hampussanden.com/python/data_wrangling/create_list_from_dictionary_keys_and_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/create_list_from_dictionary_keys_and_values/</guid>
      <description> Create a dictionary dict = {&amp;#39;county&amp;#39;: [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;fireReports&amp;#39;: [4, 24, 31, 2, 3]} Create a list from the dictionary keys # Create a list of keys list(dict.keys()) [&#39;fireReports&#39;, &#39;year&#39;, &#39;county&#39;]  Create a list from the dictionary values # Create a list of values list(dict.values()) [[4, 24, 31, 2, 3], [2012, 2012, 2013, 2014, 2014], [&#39;Cochice&#39;, &#39;Pima&#39;, &#39;Santa Cruz&#39;, &#39;Maricopa&#39;, &#39;Yuma&#39;]]  </description>
    </item>
    
    <item>
      <title>Creating Scatterplots With Seaborn</title>
      <link>https://hampussanden.com/python/data_visualization/seaborn_scatterplot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/seaborn_scatterplot/</guid>
      <description>Preliminaries import pandas as pd %matplotlib inline import random import matplotlib.pyplot as plt import seaborn as sns Create data # Create empty dataframe df = pd.DataFrame() # Add columns df[&amp;#39;x&amp;#39;] = random.sample(range(1, 1000), 5) df[&amp;#39;y&amp;#39;] = random.sample(range(1, 1000), 5) df[&amp;#39;z&amp;#39;] = [1,0,0,1,0] df[&amp;#39;k&amp;#39;] = [&amp;#39;male&amp;#39;,&amp;#39;male&amp;#39;,&amp;#39;male&amp;#39;,&amp;#39;female&amp;#39;,&amp;#39;female&amp;#39;]# View first few rows of data df.head()   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .</description>
    </item>
    
    <item>
      <title>Crosstabs In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_crosstabs/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_crosstabs/</guid>
      <description>Import pandas import pandas as pdraw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;infantry&amp;#39;, &amp;#39;infantry&amp;#39;, &amp;#39;cavalry&amp;#39;, &amp;#39;cavalry&amp;#39;, &amp;#39;infantry&amp;#39;, &amp;#39;infantry&amp;#39;, &amp;#39;cavalry&amp;#39;, &amp;#39;cavalry&amp;#39;,&amp;#39;infantry&amp;#39;, &amp;#39;infantry&amp;#39;, &amp;#39;cavalry&amp;#39;, &amp;#39;cavalry&amp;#39;], &amp;#39;experience&amp;#39;: [&amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;, &amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;, &amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;, &amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;,&amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;, &amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;], &amp;#39;name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]} df = pd.</description>
    </item>
    
    <item>
      <title>Delete Duplicates In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_delete_duplicates/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_delete_duplicates/</guid>
      <description>import modules import pandas as pd Create dataframe with duplicates raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Jason&amp;#39;, &amp;#39;Jason&amp;#39;,&amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Miller&amp;#39;, &amp;#39;Miller&amp;#39;,&amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 42, 1111111, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 4, 4, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 25, 25, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .</description>
    </item>
    
    <item>
      <title>Descriptive Statistics For pandas Dataframe</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_dataframe_descriptive_stats/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_dataframe_descriptive_stats/</guid>
      <description>Import modules import pandas as pd Create dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(data, columns = [&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df   name age preTestScore postTestScore     0  Jason  42  4  25   1  Molly  52  24  94   2  Tina  36  31  57   3  Jake  24  2  62   4  Amy  73  3  70    5 rows × 4 columns</description>
    </item>
    
    <item>
      <title>Dropping Rows And Columns In pandas Dataframe</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_dropping_column_and_rows/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_dropping_column_and_rows/</guid>
      <description>Import modules import pandas as pd Create a dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    name reports year     Cochice Jason 4 2012   Pima Molly 24 2012   Santa Cruz Tina 31 2013   Maricopa Jake 2 2014   Yuma Amy 3 2014     Drop an observation (row) df.</description>
    </item>
    
    <item>
      <title>Enumerate A List</title>
      <link>https://hampussanden.com/python/data_wrangling/enumerate_a_list/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/enumerate_a_list/</guid>
      <description># Create a list of strings data = [&amp;#39;One&amp;#39;,&amp;#39;Two&amp;#39;,&amp;#39;Three&amp;#39;,&amp;#39;Four&amp;#39;,&amp;#39;Five&amp;#39;]# For each item in the enumerated variable, data for item in enumerate(data): # Print the whole enumerated element print(item) # Print only the value (not the index number) print(item[1]) (0, &#39;One&#39;) One (1, &#39;Two&#39;) Two (2, &#39;Three&#39;) Three (3, &#39;Four&#39;) Four (4, &#39;Five&#39;) Five  </description>
    </item>
    
    <item>
      <title>Expand Cells Containing Lists Into Their Own Variables In Pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_expand_cells_containing_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_expand_cells_containing_lists/</guid>
      <description># import pandas import pandas as pd# create a dataset raw_data = {&amp;#39;score&amp;#39;: [1,2,3], &amp;#39;tags&amp;#39;: [[&amp;#39;apple&amp;#39;,&amp;#39;pear&amp;#39;,&amp;#39;guava&amp;#39;],[&amp;#39;truck&amp;#39;,&amp;#39;car&amp;#39;,&amp;#39;plane&amp;#39;],[&amp;#39;cat&amp;#39;,&amp;#39;dog&amp;#39;,&amp;#39;mouse&amp;#39;]]} df = pd.DataFrame(raw_data, columns = [&amp;#39;score&amp;#39;, &amp;#39;tags&amp;#39;]) # view the dataset df    score tags     0 1 [apple, pear, guava]   1 2 [truck, car, plane]   2 3 [cat, dog, mouse]     # expand df.tags into its own dataframe tags = df[&amp;#39;tags&amp;#39;].apply(pd.Series) # rename each variable is tags tags = tags.</description>
    </item>
    
    <item>
      <title>Filter pandas Dataframes</title>
      <link>https://hampussanden.com/python/data_wrangling/filter_dataframes/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/filter_dataframes/</guid>
      <description>Import modules import pandas as pd Create Dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;coverage&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    coverage name reports year     Cochice 25 Jason 4 2012   Pima 94 Molly 24 2012   Santa Cruz 57 Tina 31 2013   Maricopa 62 Jake 2 2014   Yuma 70 Amy 3 2014     View Column df[&amp;#39;name&amp;#39;] Cochice Jason Pima Molly Santa Cruz Tina Maricopa Jake Yuma Amy Name: name, dtype: object  View Two Columns df[[&amp;#39;name&amp;#39;, &amp;#39;reports&amp;#39;]]   .</description>
    </item>
    
    <item>
      <title>Find Largest Value In A Dataframe Column</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_find_largest_value_in_column/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_find_largest_value_in_column/</guid>
      <description># import modules %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np# Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 4 25   1 Molly Jacobson 52 24 94   2 Tina Ali 36 31 57   3 Jake Milner 24 2 62   4 Amy Cooze 73 3 70     # Index of the row with the highest value in the preTestScore column df[&amp;#39;preTestScore&amp;#39;].</description>
    </item>
    
    <item>
      <title>Find Unique Values In Pandas Dataframes</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_find_unique_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_find_unique_values/</guid>
      <description>import pandas as pd import numpy as npraw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;51st&amp;#39;, &amp;#39;29th&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;19th&amp;#39;, &amp;#39;12th&amp;#39;, &amp;#39;101st&amp;#39;, &amp;#39;90th&amp;#39;, &amp;#39;30th&amp;#39;, &amp;#39;193th&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;94th&amp;#39;, &amp;#39;91th&amp;#39;], &amp;#39;trucks&amp;#39;: [&amp;#39;MAZ-7310&amp;#39;, np.nan, &amp;#39;MAZ-7310&amp;#39;, &amp;#39;MAZ-7310&amp;#39;, &amp;#39;Tatra 810&amp;#39;, &amp;#39;Tatra 810&amp;#39;, &amp;#39;Tatra 810&amp;#39;, &amp;#39;Tatra 810&amp;#39;, &amp;#39;ZIS-150&amp;#39;, &amp;#39;Tatra 810&amp;#39;, &amp;#39;ZIS-150&amp;#39;, &amp;#39;ZIS-150&amp;#39;], &amp;#39;tanks&amp;#39;: [&amp;#39;Merkava Mark 4&amp;#39;, &amp;#39;Merkava Mark 4&amp;#39;, &amp;#39;Merkava Mark 4&amp;#39;, &amp;#39;Leopard 2A6M&amp;#39;, &amp;#39;Leopard 2A6M&amp;#39;, &amp;#39;Leopard 2A6M&amp;#39;, &amp;#39;Arjun MBT&amp;#39;, &amp;#39;Leopard 2A6M&amp;#39;, &amp;#39;Arjun MBT&amp;#39;, &amp;#39;Arjun MBT&amp;#39;, &amp;#39;Arjun MBT&amp;#39;, &amp;#39;Arjun MBT&amp;#39;], &amp;#39;aircraft&amp;#39;: [&amp;#39;none&amp;#39;, &amp;#39;none&amp;#39;, &amp;#39;none&amp;#39;, &amp;#39;Harbin Z-9&amp;#39;, &amp;#39;Harbin Z-9&amp;#39;, &amp;#39;none&amp;#39;, &amp;#39;Harbin Z-9&amp;#39;, &amp;#39;SH-60B Seahawk&amp;#39;, &amp;#39;SH-60B Seahawk&amp;#39;, &amp;#39;SH-60B Seahawk&amp;#39;, &amp;#39;SH-60B Seahawk&amp;#39;, &amp;#39;SH-60B Seahawk&amp;#39;]} df = pd.</description>
    </item>
    
    <item>
      <title>Geocoding And Reverse Geocoding</title>
      <link>https://hampussanden.com/python/data_wrangling/geocoding_and_reverse_geocoding/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/geocoding_and_reverse_geocoding/</guid>
      <description>Geocoding (converting a physical address or location into latitude/longitude) and reverse geocoding (converting a lat/long to a physical address or location) are common tasks when working with geo-data.
Python offers a number of packages to make the task incredibly easy. In the tutorial below, I use pygeocoder, a wrapper for Google&amp;rsquo;s geo-API, to both geocode and reverse geocode.
Preliminaries First we want to load the packages we will want to use in the script.</description>
    </item>
    
    <item>
      <title>Geolocate A City And Country</title>
      <link>https://hampussanden.com/python/data_wrangling/geolocate_a_city_and_country/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/geolocate_a_city_and_country/</guid>
      <description>This tutorial creates a function that attempts to take a city and country and return its latitude and longitude. But when the city is unavailable (which is often be the case), the returns the latitude and longitude of the center of the country.
Preliminaries from geopy.geocoders import Nominatim geolocator = Nominatim() import numpy as np Create Geolocation Function def geolocate(city=None, country=None): &amp;#39;&amp;#39;&amp;#39; Inputs city and country, or just country. Returns the lat/long coordinates of either the city if possible, if not, then returns lat/long of the center of the country.</description>
    </item>
    
    <item>
      <title>Geolocate A City Or Country</title>
      <link>https://hampussanden.com/python/data_wrangling/geolocate_a_city_or_country/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/geolocate_a_city_or_country/</guid>
      <description>This tutorial creates a function that attempts to take a city and country and return its latitude and longitude. But when the city is unavailable (which is often be the case), the returns the latitude and longitude of the center of the country.
Preliminaries from geopy.geocoders import Nominatim geolocator = Nominatim() import numpy as np Create Geolocation Function def geolocate(city=None, country=None): &amp;#39;&amp;#39;&amp;#39; Inputs city and country, or just country. Returns the lat/long coordinates of either the city if possible, if not, then returns lat/long of the center of the country.</description>
    </item>
    
    <item>
      <title>Group A Time Series With pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_group_by_time/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_group_by_time/</guid>
      <description>Import required modules import pandas as pd import numpy as np Create a dataframe df = pd.DataFrame() df[&amp;#39;german_army&amp;#39;] = np.random.randint(low=20000, high=30000, size=100) df[&amp;#39;allied_army&amp;#39;] = np.random.randint(low=20000, high=40000, size=100) df.index = pd.date_range(&amp;#39;1/1/2014&amp;#39;, periods=100, freq=&amp;#39;H&amp;#39;) df.head()    german_army allied_army     2014-01-01 00:00:00 28755 33938   2014-01-01 01:00:00 25176 28631   2014-01-01 02:00:00 23261 39685   2014-01-01 03:00:00 28686 27756   2014-01-01 04:00:00 24588 25681     Truncate the dataframe df.</description>
    </item>
    
    <item>
      <title>Group Bar Plot In MatPlotLib</title>
      <link>https://hampussanden.com/python/data_visualization/matplotlib_grouped_bar_plot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/matplotlib_grouped_bar_plot/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;pre_score&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;mid_score&amp;#39;: [25, 94, 57, 62, 70], &amp;#39;post_score&amp;#39;: [5, 43, 23, 23, 51]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;pre_score&amp;#39;, &amp;#39;mid_score&amp;#39;, &amp;#39;post_score&amp;#39;]) df   first_name pre_score mid_score post_score     0  Jason  4  25  5   1  Molly  24  94  43   2  Tina  31  57  23   3  Jake  2  62  23   4  Amy  3  70  51     Make plot # Setting the positions and width for the bars pos = list(range(len(df[&amp;#39;pre_score&amp;#39;]))) width = 0.</description>
    </item>
    
    <item>
      <title>Group Data By Time</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_group_data_by_time/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_group_data_by_time/</guid>
      <description>On March 13, 2016, version 0.18.0 of Pandas was released, with significant changes in how the resampling function operates. This tutorial follows v0.18.0 and will not work for previous versions of pandas.
First let&amp;rsquo;s load the modules we care about
Preliminaries # Import required packages import pandas as pd import datetime import numpy as np Next, let&amp;rsquo;s create some sample data that we can group by time as an sample.</description>
    </item>
    
    <item>
      <title>Group Pandas Data By Hour Of The Day</title>
      <link>https://hampussanden.com/python/data_wrangling/group_pandas_data_by_hour_of_the_day/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/group_pandas_data_by_hour_of_the_day/</guid>
      <description>Preliminaries # Import libraries import pandas as pd import numpy as np Create Data # Create a time series of 2000 elements, one very five minutes starting on 1/1/2000 time = pd.date_range(&amp;#39;1/1/2000&amp;#39;, periods=2000, freq=&amp;#39;5min&amp;#39;) # Create a pandas series with a random values between 0 and 100, using &amp;#39;time&amp;#39; as the index series = pd.Series(np.random.randint(100, size=2000), index=time) View Data # View the first few rows of the data series[0:10] 2000-01-01 00:00:00 40 2000-01-01 00:05:00 13 2000-01-01 00:10:00 99 2000-01-01 00:15:00 72 2000-01-01 00:20:00 4 2000-01-01 00:25:00 36 2000-01-01 00:30:00 24 2000-01-01 00:35:00 20 2000-01-01 00:40:00 83 2000-01-01 00:45:00 44 Freq: 5T, dtype: int64  Group Data By Time Of The Day # Group the data by the index&amp;#39;s hour value, then aggregate by the average series.</description>
    </item>
    
    <item>
      <title>Grouping Rows In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_group_rows_by/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_group_rows_by/</guid>
      <description># Import modules import pandas as pd# Example dataframe raw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;,&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;], &amp;#39;name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]} df = pd.</description>
    </item>
    
    <item>
      <title>Hierarchical Data In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_hierarchical_data/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_hierarchical_data/</guid>
      <description># import modules import pandas as pd# Create dataframe raw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;,&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;], &amp;#39;name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]} df = pd.</description>
    </item>
    
    <item>
      <title>Histograms In MatPlotLib</title>
      <link>https://hampussanden.com/python/data_visualization/matplotlib_histogram/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/matplotlib_histogram/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np import math # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create dataframe df = pd.read_csv(&amp;#39;https://www.dropbox.com/s/52cb7kcflr8qm2u/5kings_battles_v1.csv?dl=1&amp;#39;) df.head()   name year battle_number attacker_king defender_king attacker_1 attacker_2 attacker_3 attacker_4 defender_1 defender_2 defender_3 defender_4 attacker_outcome battle_type major_death major_capture attacker_size defender_size attacker_commander defender_commander summer location region note     0  Battle of the Golden Tooth  298  1  Joffrey/Tommen Baratheon  Robb Stark  Lannister  NaN  NaN  NaN  Tully  NaN NaN NaN  win  pitched battle  1  0  15000  4000  Jaime Lannister  Clement Piper, Vance  1  Golden Tooth  The Westerlands  NaN   1  Battle at the Mummer&#39;s Ford  298  2  Joffrey/Tommen Baratheon  Robb Stark  Lannister  NaN  NaN  NaN  Baratheon  NaN NaN NaN  win  ambush  1  0  NaN  120  Gregor Clegane  Beric Dondarrion  1  Mummer&#39;s Ford  The Riverlands  NaN   2  Battle of Riverrun  298  3  Joffrey/Tommen Baratheon  Robb Stark  Lannister  NaN  NaN  NaN  Tully  NaN NaN NaN  win  pitched battle  0  1  15000  10000  Jaime Lannister, Andros Brax  Edmure Tully, Tytos Blackwood  1  Riverrun  The Riverlands  NaN   3  Battle of the Green Fork  298  4  Robb Stark  Joffrey/Tommen Baratheon  Stark  NaN  NaN  NaN  Lannister  NaN NaN NaN  loss  pitched battle  1  1  18000  20000  Roose Bolton, Wylis Manderly, Medger Cerwyn, H.</description>
    </item>
    
    <item>
      <title>Join And Merge Pandas Dataframe</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_join_merge_dataframe/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_join_merge_dataframe/</guid>
      <description>import modules import pandas as pd from IPython.display import display from IPython.display import Image Create a dataframe raw_data = { &amp;#39;subject_id&amp;#39;: [&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;], &amp;#39;first_name&amp;#39;: [&amp;#39;Alex&amp;#39;, &amp;#39;Amy&amp;#39;, &amp;#39;Allen&amp;#39;, &amp;#39;Alice&amp;#39;, &amp;#39;Ayoung&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Anderson&amp;#39;, &amp;#39;Ackerman&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Aoni&amp;#39;, &amp;#39;Atiches&amp;#39;]} df_a = pd.DataFrame(raw_data, columns = [&amp;#39;subject_id&amp;#39;, &amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;]) df_a    subject_id first_name last_name     0 1 Alex Anderson   1 2 Amy Ackerman   2 3 Allen Ali   3 4 Alice Aoni   4 5 Ayoung Atiches     Create a second dataframe raw_data = { &amp;#39;subject_id&amp;#39;: [&amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;, &amp;#39;6&amp;#39;, &amp;#39;7&amp;#39;, &amp;#39;8&amp;#39;], &amp;#39;first_name&amp;#39;: [&amp;#39;Billy&amp;#39;, &amp;#39;Brian&amp;#39;, &amp;#39;Bran&amp;#39;, &amp;#39;Bryce&amp;#39;, &amp;#39;Betty&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Bonder&amp;#39;, &amp;#39;Black&amp;#39;, &amp;#39;Balwner&amp;#39;, &amp;#39;Brice&amp;#39;, &amp;#39;Btisan&amp;#39;]} df_b = pd.</description>
    </item>
    
    <item>
      <title>List Unique Values In A pandas Column</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_list_unique_values_in_column/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_list_unique_values_in_column/</guid>
      <description>Special thanks to Bob Haffner for pointing out a better way of doing it.
Preliminaries # Import modules import pandas as pd # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create an example dataframe # Create an example dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3]} df = pd.</description>
    </item>
    
    <item>
      <title>Load A JSON File Into Pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/load_json_file_into_pandas/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/load_json_file_into_pandas/</guid>
      <description> Preliminaries # Load library import pandas as pd Load JSON File # Create URL to JSON file (alternatively this can be a filepath) url = &amp;#39;https://raw.githubusercontent.com/hampussanden/simulated_datasets/master/data.json&amp;#39; # Load the first sheet of the JSON file into a data frame df = pd.read_json(url, orient=&amp;#39;columns&amp;#39;) # View the first ten rows df.head(10)   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    category datetime integer     0 0 2015-01-01 00:00:00 5   1 0 2015-01-01 00:00:01 5   10 0 2015-01-01 00:00:10 5   11 0 2015-01-01 00:00:11 5   12 0 2015-01-01 00:00:12 8   13 0 2015-01-01 00:00:13 9   14 0 2015-01-01 00:00:14 8   15 0 2015-01-01 00:00:15 8   16 0 2015-01-01 00:00:16 2   17 0 2015-01-01 00:00:17 1     </description>
    </item>
    
    <item>
      <title>Load An Excel File Into Pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/load_excel_file_into_pandas/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/load_excel_file_into_pandas/</guid>
      <description> Preliminaries # Load library import pandas as pd Load Excel File # Create URL to Excel file (alternatively this can be a filepath) url = &amp;#39;https://raw.githubusercontent.com/hampussanden/simulated_datasets/master/data.xlsx&amp;#39; # Load the first sheet of the Excel file into a data frame df = pd.read_excel(url, sheetname=0, header=1) # View the first ten rows df.head(10)   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    5 2015-01-01 00:00:00 0     0 5 2015-01-01 00:00:01 0   1 9 2015-01-01 00:00:02 0   2 6 2015-01-01 00:00:03 0   3 6 2015-01-01 00:00:04 0   4 9 2015-01-01 00:00:05 0   5 7 2015-01-01 00:00:06 0   6 1 2015-01-01 00:00:07 0   7 6 2015-01-01 00:00:08 0   8 9 2015-01-01 00:00:09 0   9 5 2015-01-01 00:00:10 0     </description>
    </item>
    
    <item>
      <title>Load Excel Spreadsheet As pandas Dataframe</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_dataframe_load_xls/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_dataframe_load_xls/</guid>
      <description># import modules import pandas as pd# Import the excel file and call it xls_file xls_file = pd.ExcelFile(&amp;#39;../data/example.xls&amp;#39;) xls_file &amp;lt;pandas.io.excel.ExcelFile at 0x111912be0&amp;gt;  # View the excel file&amp;#39;s sheet names xls_file.sheet_names [&#39;Sheet1&#39;]  # Load the xls file&amp;#39;s Sheet1 as a dataframe df = xls_file.parse(&amp;#39;Sheet1&amp;#39;) df    year deaths_attacker deaths_defender soldiers_attacker soldiers_defender wounded_attacker wounded_defender     0 1945 425 423 2532 37235 41 14   1 1956 242 264 6346 2523 214 1424   2 1964 323 1231 3341 2133 131 131   3 1969 223 23 6732 1245 12 12   4 1971 783 23 12563 2671 123 34   5 1981 436 42 2356 7832 124 124   6 1982 324 124 253 2622 264 1124   7 1992 3321 631 5277 3331 311 1431   8 1999 262 232 2732 2522 132 122   9 2004 843 213 6278 26773 623 2563     </description>
    </item>
    
    <item>
      <title>Loading A CSV Into pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_dataframe_importing_csv/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_dataframe_importing_csv/</guid>
      <description>import modules import pandas as pd import numpy as np Create dataframe (that we will be importing) raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#34;.&amp;#34;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, &amp;#34;.&amp;#34;, &amp;#34;.&amp;#34;], &amp;#39;postTestScore&amp;#39;: [&amp;#34;25,000&amp;#34;, &amp;#34;94,000&amp;#34;, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df   .dataframe thead tr:only-child th { text-align: right; } .</description>
    </item>
    
    <item>
      <title>Long To Wide Format</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_long_to_wide/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_long_to_wide/</guid>
      <description>import modules import pandas as pd Create &amp;ldquo;long&amp;rdquo; dataframe raw_data = {&amp;#39;patient&amp;#39;: [1, 1, 1, 2, 2], &amp;#39;obs&amp;#39;: [1, 2, 3, 1, 2], &amp;#39;treatment&amp;#39;: [0, 1, 0, 1, 0], &amp;#39;score&amp;#39;: [6252, 24243, 2345, 2342, 23525]} df = pd.DataFrame(raw_data, columns = [&amp;#39;patient&amp;#39;, &amp;#39;obs&amp;#39;, &amp;#39;treatment&amp;#39;, &amp;#39;score&amp;#39;]) df    patient obs treatment score     0 1 1 0 6252   1 1 2 1 24243   2 1 3 0 2345   3 2 1 1 2342   4 2 2 0 23525     Make a &amp;ldquo;wide&amp;rdquo; data Now we will create a &amp;ldquo;wide&amp;rdquo; dataframe with the rows by patient number, the columns being by observation number, and the cell values being the score values.</description>
    </item>
    
    <item>
      <title>Lower Case Column Names In Pandas Dataframe</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_lowercase_column_names/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_lowercase_column_names/</guid>
      <description>Preliminaries # Import modules import pandas as pd # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create an example dataframe # Create an example dataframe data = {&amp;#39;NAME&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;YEAR&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;REPORTS&amp;#39;: [4, 24, 31, 2, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df    NAME REPORTS YEAR     Cochice Jason 4 2012   Pima Molly 24 2012   Santa Cruz Tina 31 2013   Maricopa Jake 2 2014   Yuma Amy 3 2014     Lowercase column values # Map the lowering function to all column names df.</description>
    </item>
    
    <item>
      <title>Make New Columns Using Functions</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_make_new_columns_using_functions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_make_new_columns_using_functions/</guid>
      <description># Import modules import pandas as pd# Example dataframe raw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;,&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;], &amp;#39;name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]} df = pd.</description>
    </item>
    
    <item>
      <title>Making A Matplotlib Scatterplot From A Pandas Dataframe</title>
      <link>https://hampussanden.com/python/data_visualization/matplotlib_scatterplot_from_pandas/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/matplotlib_scatterplot_from_pandas/</guid>
      <description>import modules %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;female&amp;#39;: [0, 1, 1, 0, 1], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;female&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df   .</description>
    </item>
    
    <item>
      <title>Map External Values To Dataframe Values in pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_map_values_to_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_map_values_to_values/</guid>
      <description>import modules import pandas as pd Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;city&amp;#39;: [&amp;#39;San Francisco&amp;#39;, &amp;#39;Baltimore&amp;#39;, &amp;#39;Miami&amp;#39;, &amp;#39;Douglas&amp;#39;, &amp;#39;Boston&amp;#39;]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;city&amp;#39;]) df    first_name last_name age city     0 Jason Miller 42 San Francisco   1 Molly Jacobson 52 Baltimore   2 Tina Ali 36 Miami   3 Jake Milner 24 Douglas   4 Amy Cooze 73 Boston     Create a dictionary of values city_to_state = { &amp;#39;San Francisco&amp;#39; : &amp;#39;California&amp;#39;, &amp;#39;Baltimore&amp;#39; : &amp;#39;Maryland&amp;#39;, &amp;#39;Miami&amp;#39; : &amp;#39;Florida&amp;#39;, &amp;#39;Douglas&amp;#39; : &amp;#39;Arizona&amp;#39;, &amp;#39;Boston&amp;#39; : &amp;#39;Massachusetts&amp;#39;} Map the values of the city_to_state dictionary to the values in the city variable df[&amp;#39;state&amp;#39;] = df[&amp;#39;city&amp;#39;].</description>
    </item>
    
    <item>
      <title>Matplotlib, A Simple Example</title>
      <link>https://hampussanden.com/python/data_visualization/matplotlib_simple_example/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/matplotlib_simple_example/</guid>
      <description> Tell Jupyter to load matplotlib and display all visuals created inline (that is, on this page) %matplotlib inline Import matplotlib&amp;rsquo;s pyplot module import matplotlib.pyplot as pyplot Create a simple plot pyplot.plot([1.6, 2.7]) [&amp;lt;matplotlib.lines.Line2D at 0x10c4e7978&amp;gt;]  </description>
    </item>
    
    <item>
      <title>Missing Data In pandas Dataframes</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_missing_data/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_missing_data/</guid>
      <description>import modules import pandas as pd import numpy as np Create dataframe with missing values raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, np.nan, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, np.nan, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, np.nan, 36, 24, 73], &amp;#39;sex&amp;#39;: [&amp;#39;m&amp;#39;, np.nan, &amp;#39;f&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;f&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, np.nan, np.nan, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, np.nan, np.nan, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;sex&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age sex preTestScore postTestScore     0 Jason Miller 42.</description>
    </item>
    
    <item>
      <title>Moving Averages In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_moving_average/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_moving_average/</guid>
      <description>Import Modules # Import pandas import pandas as pd Create Dataframe # Create data data = {&amp;#39;score&amp;#39;: [1,1,1,2,2,2,3,3,3]} # Create dataframe df = pd.DataFrame(data) # View dataframe df   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    score     0 1   1 1   2 1   3 2   4 2   5 2   6 3   7 3   8 3     Calculate Rolling Mean # Calculate the moving average.</description>
    </item>
    
    <item>
      <title>Normalize A Column In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_normalize_column/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_normalize_column/</guid>
      <description>Preliminaries # Import required modules import pandas as pd from sklearn import preprocessing # Set charts to view inline %matplotlib inline Create Unnormalized Data # Create an example dataframe with a column of unnormalized data data = {&amp;#39;score&amp;#39;: [234,24,14,27,-74,46,73,-18,59,160]} df = pd.DataFrame(data) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    score     0 234   1 24   2 14   3 27   4 -74   5 46   6 73   7 -18   8 59   9 160     # View the unnormalized data df[&amp;#39;score&amp;#39;].</description>
    </item>
    
    <item>
      <title>Pie Chart In MatPlotLib</title>
      <link>https://hampussanden.com/python/data_visualization/matplotlib_pie_chart/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/matplotlib_pie_chart/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt Create dataframe raw_data = {&amp;#39;officer_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;jan_arrests&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;feb_arrests&amp;#39;: [25, 94, 57, 62, 70], &amp;#39;march_arrests&amp;#39;: [5, 43, 23, 23, 51]} df = pd.DataFrame(raw_data, columns = [&amp;#39;officer_name&amp;#39;, &amp;#39;jan_arrests&amp;#39;, &amp;#39;feb_arrests&amp;#39;, &amp;#39;march_arrests&amp;#39;]) df    officer_name jan_arrests feb_arrests march_arrests     0 Jason 4 25 5   1 Molly 24 94 43   2 Tina 31 57 23   3 Jake 2 62 23   4 Amy 3 70 51     # Create a column with the total arrests for each officer df[&amp;#39;total_arrests&amp;#39;] = df[&amp;#39;jan_arrests&amp;#39;] + df[&amp;#39;feb_arrests&amp;#39;] + df[&amp;#39;march_arrests&amp;#39;] df    officer_name jan_arrests feb_arrests march_arrests total_arrests     0 Jason 4 25 5 34   1 Molly 24 94 43 161   2 Tina 31 57 23 111   3 Jake 2 62 23 87   4 Amy 3 70 51 124     Make plot # Create a list of colors (from iWantHue) colors = [&amp;#34;#E13F29&amp;#34;, &amp;#34;#D69A80&amp;#34;, &amp;#34;#D63B59&amp;#34;, &amp;#34;#AE5552&amp;#34;, &amp;#34;#CB5C3B&amp;#34;, &amp;#34;#EB8076&amp;#34;, &amp;#34;#96624E&amp;#34;] # Create a pie chart plt.</description>
    </item>
    
    <item>
      <title>Pivot Tables In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_pivot_tables/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_pivot_tables/</guid>
      <description>import modules import pandas as pd Create dataframe raw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;,&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;], &amp;#39;TestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3]} df = pd.DataFrame(raw_data, columns = [&amp;#39;regiment&amp;#39;, &amp;#39;company&amp;#39;, &amp;#39;TestScore&amp;#39;]) df    regiment company TestScore     0 Nighthawks 1st 4   1 Nighthawks 1st 24   2 Nighthawks 2nd 31   3 Nighthawks 2nd 2   4 Dragoons 1st 3   5 Dragoons 1st 4   6 Dragoons 2nd 24   7 Dragoons 2nd 31   8 Scouts 1st 2   9 Scouts 1st 3   10 Scouts 2nd 2   11 Scouts 2nd 3     Create a pivot table of group means, by company and regiment pd.</description>
    </item>
    
    <item>
      <title>Quickly Change A Column Of Strings In Pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_change_column_of_strings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_change_column_of_strings/</guid>
      <description>Often I need or want to change the case of all items in a column of strings (e.g. BRAZIL to Brazil, etc.). There are many ways to accomplish this but I have settled on this one as the easiest and quickest.
# Import pandas import pandas as pd # Create a list of first names first_names = pd.Series([&amp;#39;Steve Murrey&amp;#39;, &amp;#39;Jane Fonda&amp;#39;, &amp;#39;Sara McGully&amp;#39;, &amp;#39;Mary Jane&amp;#39;])# print the column first_names 0 Steve Murrey 1 Jane Fonda 2 Sara McGully 3 Mary Jane dtype: object  # print the column with lower case first_names.</description>
    </item>
    
    <item>
      <title>Random Sampling Dataframe</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_sampling_dataframe/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_sampling_dataframe/</guid>
      <description>import modules import pandas as pd import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 4 25   1 Molly Jacobson 52 24 94   2 Tina Ali 36 31 57   3 Jake Milner 24 2 62   4 Amy Cooze 73 3 70     Select a random subset of 2 without replacement df.</description>
    </item>
    
    <item>
      <title>Ranking Rows Of Pandas Dataframes</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_dataframe_ranking_rows/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_dataframe_ranking_rows/</guid>
      <description># import modules import pandas as pd# Create dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;coverage&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df   coverage name reports year     Cochice  25  Jason  4  2012   Pima  94  Molly  24  2012   Santa Cruz  57  Tina  31  2013   Maricopa  62  Jake  2  2014   Yuma  70  Amy  3  2014    5 rows × 4 columns</description>
    </item>
    
    <item>
      <title>Regular Expression Basics</title>
      <link>https://hampussanden.com/python/data_wrangling/regular_expressions_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/regular_expressions_basics/</guid>
      <description>Import the regex (re) package import re Import sys import sys Create a simple text string. text = &amp;#39;The quick brown fox jumped over the lazy black bear.&amp;#39; Create a pattern to match three_letter_word = &amp;#39;\w{3}&amp;#39; Convert the string into a regex object pattern_re = re.compile(three_letter_word); pattern_re re.compile(r&#39;\w{3}&#39;, re.UNICODE)  Does a three letter word appear in text? re_search = re.search(&amp;#39;..own&amp;#39;, text) If the search query is at all true, if re_search: # Print the search results print(re_search.</description>
    </item>
    
    <item>
      <title>Regular Expression By Example</title>
      <link>https://hampussanden.com/python/data_wrangling/regex_by_example/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/regex_by_example/</guid>
      <description># Import regex import re# Create some data text = &amp;#39;A flock of 120 quick brown foxes jumped over 30 lazy brown, bears.&amp;#39; ^ Matches beginning of line. re.findall(&amp;#39;^A&amp;#39;, text) [&#39;A&#39;]  $ Matches end of line. re.findall(&amp;#39;bears.$&amp;#39;, text) [&#39;bears.&#39;]  . Matches any single character except newline. re.findall(&amp;#39;f..es&amp;#39;, text) [&#39;foxes&#39;]  [...] Matches any single character in brackets. # Find all vowels re.findall(&amp;#39;[aeiou]&amp;#39;, text) [&#39;o&#39;, &#39;o&#39;, &#39;u&#39;, &#39;i&#39;, &#39;o&#39;, &#39;o&#39;, &#39;e&#39;, &#39;u&#39;, &#39;e&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;]  [# ^.</description>
    </item>
    
    <item>
      <title>Reindexing pandas Series And Dataframes</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_dataframe_reindexing/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_dataframe_reindexing/</guid>
      <description>Series # Import Modules import pandas as pd import numpy as np# Create a pandas series of the risk of fire in Southern Arizona brushFireRisk = pd.Series([34, 23, 12, 23], index = [&amp;#39;Bisbee&amp;#39;, &amp;#39;Douglas&amp;#39;, &amp;#39;Sierra Vista&amp;#39;, &amp;#39;Tombstone&amp;#39;]) brushFireRisk Bisbee 34 Douglas 23 Sierra Vista 12 Tombstone 23 dtype: int64  # Reindex the series and create a new series variable brushFireRiskReindexed = brushFireRisk.reindex([&amp;#39;Tombstone&amp;#39;, &amp;#39;Douglas&amp;#39;, &amp;#39;Bisbee&amp;#39;, &amp;#39;Sierra Vista&amp;#39;, &amp;#39;Barley&amp;#39;, &amp;#39;Tucson&amp;#39;]) brushFireRiskReindexed Tombstone 23.</description>
    </item>
    
    <item>
      <title>Rename Column Headers In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_rename_column_headers/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_rename_column_headers/</guid>
      <description>Originally from rgalbo on StackOverflow.
Preliminaries # Import required modules import pandas as pd Create example data # Create a values as dictionary of lists raw_data = {&amp;#39;0&amp;#39;: [&amp;#39;first_name&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;1&amp;#39;: [&amp;#39;last_name&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;2&amp;#39;: [&amp;#39;age&amp;#39;, 52, 36, 24, 73], &amp;#39;3&amp;#39;: [&amp;#39;preTestScore&amp;#39;, 24, 31, 2, 3]} # Create a dataframe df = pd.DataFrame(raw_data) # View a dataframe df    0 1 2 3     0 first_name last_name age preTestScore   1 Molly Jacobson 52 24   2 Tina Ali 36 31   3 Jake Milner 24 2   4 Amy Cooze 73 3     Replace the header value with the first row&amp;rsquo;s values # Create a new variable called &amp;#39;header&amp;#39; from the first row of the dataset header = df.</description>
    </item>
    
    <item>
      <title>Rename Multiple pandas Dataframe Column Names</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_rename_multiple_columns/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_rename_multiple_columns/</guid>
      <description>Preliminaries # Import modules import pandas as pd # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create an example dataframe # Create an example dataframe data = {&amp;#39;Commander&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;Date&amp;#39;: [&amp;#39;2012, 02, 08&amp;#39;, &amp;#39;2012, 02, 08&amp;#39;, &amp;#39;2012, 02, 08&amp;#39;, &amp;#39;2012, 02, 08&amp;#39;, &amp;#39;2012, 02, 08&amp;#39;], &amp;#39;Score&amp;#39;: [4, 24, 31, 2, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df    Commander Date Score     Cochice Jason 2012, 02, 08 4   Pima Molly 2012, 02, 08 24   Santa Cruz Tina 2012, 02, 08 31   Maricopa Jake 2012, 02, 08 2   Yuma Amy 2012, 02, 08 3     Rename Column Names df.</description>
    </item>
    
    <item>
      <title>Replacing Values In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_replace_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_replace_values/</guid>
      <description>import modules import pandas as pd import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [-999, -999, -999, 2, 1], &amp;#39;postTestScore&amp;#39;: [2, 2, -999, 2, -999]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 -999 2   1 Molly Jacobson 52 -999 2   2 Tina Ali 36 -999 -999   3 Jake Milner 24 2 2   4 Amy Cooze 73 1 -999     Replace all values of -999 with NAN df.</description>
    </item>
    
    <item>
      <title>Saving A pandas Dataframe As A CSV</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_saving_dataframe_as_csv/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_saving_dataframe_as_csv/</guid>
      <description>import modules import pandas as pd Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 4 25   1 Molly Jacobson 52 24 94   2 Tina Ali 36 31 57   3 Jake Milner 24 2 62   4 Amy Cooze 73 3 70     Save the dataframe called &amp;ldquo;df&amp;rdquo; as csv Note: I&amp;rsquo;ve commented out this line of code so it does not run.</description>
    </item>
    
    <item>
      <title>Scatterplot In MatPlotLib</title>
      <link>https://hampussanden.com/python/data_visualization/matplotlib_simple_scatterplot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/matplotlib_simple_scatterplot/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create dataframe df = pd.read_csv(&amp;#39;https://raw.githubusercontent.com/hampussanden/war_of_the_five_kings_dataset/master/5kings_battles_v1.csv&amp;#39;) df.head()    name year battle_number attacker_king defender_king attacker_1 attacker_2 attacker_3 attacker_4 defender_1 defender_2 defender_3 defender_4 attacker_outcome battle_type major_death major_capture attacker_size defender_size attacker_commander defender_commander summer location region note     0 Battle of the Golden Tooth 298 1 Joffrey/Tommen Baratheon Robb Stark Lannister NaN NaN NaN Tully NaN NaN NaN win pitched battle 1.</description>
    </item>
    
    <item>
      <title>Search A pandas Column For A Value</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_search_column_for_value/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_search_column_for_value/</guid>
      <description># Import modules import pandas as pdraw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Jason&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Miller&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 42, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 4, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 25, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 4 25   1 Jason Miller 42 4 25   2 Tina Ali 36 31 57   3 Jake Milner 24 2 62   4 Amy Cooze 73 3 70     Find where a value exists in a column # View preTestscore where postTestscore is greater than 50 df[&amp;#39;preTestScore&amp;#39;].</description>
    </item>
    
    <item>
      <title>Select Rows When Columns Contain Certain Values</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_select_rows_when_column_has_certain_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_select_rows_when_column_has_certain_values/</guid>
      <description>Preliminaries # Import modules import pandas as pd # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create an example dataframe # Create an example dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df    name reports year     Cochice Jason 4 2012   Pima Molly 24 2012   Santa Cruz Tina 31 2013   Maricopa Jake 2 2014   Yuma Amy 3 2014     Grab rows based on column values value_list = [&amp;#39;Tina&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Jason&amp;#39;]#Grab DataFrame rows where column has certain values df[df.</description>
    </item>
    
    <item>
      <title>Select Rows With A Certain Value</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_select_rows_containing_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_select_rows_containing_values/</guid>
      <description>import pandas as pd# Create an example dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;], &amp;#39;country&amp;#39;: [[&amp;#39;Syria&amp;#39;, &amp;#39;Lebanon&amp;#39;],[&amp;#39;Spain&amp;#39;, &amp;#39;Morocco&amp;#39;]]} df = pd.DataFrame(data) df    country name     0 [Syria, Lebanon] Jason   1 [Spain, Morocco] Molly     df[df[&amp;#39;country&amp;#39;].map(lambda country: &amp;#39;Syria&amp;#39; in country)]    country name     0 [Syria, Lebanon] Jason     </description>
    </item>
    
    <item>
      <title>Select Rows With Multiple Filters</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_select_rows_multiple_filters/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_select_rows_multiple_filters/</guid>
      <description># import pandas as pd import pandas as pd# Create an example dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;], &amp;#39;score&amp;#39;: [1,2,3,4,5]} df = pd.DataFrame(data) df    name score     0 A 1   1 B 2   2 C 3   3 D 4   4 E 5     # Select rows of the dataframe where df.</description>
    </item>
    
    <item>
      <title>Selecting pandas DataFrame Rows Based On Conditions</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_selecting_rows_on_conditions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_selecting_rows_on_conditions/</guid>
      <description>Preliminaries # Import modules import pandas as pd import numpy as np# Create a dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, np.nan, np.nan, np.nan], &amp;#39;nationality&amp;#39;: [&amp;#39;USA&amp;#39;, &amp;#39;USA&amp;#39;, &amp;#39;France&amp;#39;, &amp;#39;UK&amp;#39;, &amp;#39;UK&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;nationality&amp;#39;, &amp;#39;age&amp;#39;]) df    first_name nationality age     0 Jason USA 42   1 Molly USA 52   2 NaN France 36   3 NaN UK 24   4 NaN UK 70     Method 1: Using Boolean Variables # Create variable with TRUE if nationality is USA american = df[&amp;#39;nationality&amp;#39;] == &amp;#34;USA&amp;#34; # Create variable with TRUE if age is greater than 50 elderly = df[&amp;#39;age&amp;#39;] &amp;gt; 50 # Select all cases where nationality is USA and age is greater than 50 df[american &amp;amp; elderly]    first_name nationality age     1 Molly USA 52     Method 2: Using variable attributes # Select all cases where the first name is not missing and nationality is USA  df[df[&amp;#39;first_name&amp;#39;].</description>
    </item>
    
    <item>
      <title>Simple Example Dataframes In pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_dataframe_examples/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_dataframe_examples/</guid>
      <description>import modules import pandas as pd Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 4 25   1 Molly Jacobson 52 24 94   2 Tina Ali 36 31 57   3 Jake Milner 24 2 62   4 Amy Cooze 73 3 70     Create 2nd dataframe raw_data_2 = {&amp;#39;first_name&amp;#39;: [&amp;#39;Sarah&amp;#39;, &amp;#39;Gueniva&amp;#39;, &amp;#39;Know&amp;#39;, &amp;#39;Sara&amp;#39;, &amp;#39;Cat&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Mornig&amp;#39;, &amp;#39;Jaker&amp;#39;, &amp;#39;Alom&amp;#39;, &amp;#39;Ormon&amp;#39;, &amp;#39;Koozer&amp;#39;], &amp;#39;age&amp;#39;: [53, 26, 72, 73, 24], &amp;#39;preTestScore&amp;#39;: [13, 52, 72, 26, 26], &amp;#39;postTestScore&amp;#39;: [82, 52, 56, 234, 254]} df_2 = pd.</description>
    </item>
    
    <item>
      <title>Sorting Rows In pandas Dataframes</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_sorting_rows_dataframe/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_sorting_rows_dataframe/</guid>
      <description>import modules import pandas as pd Create dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [1, 2, 1, 2, 3], &amp;#39;coverage&amp;#39;: [2, 2, 3, 3, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df    coverage name reports year     Cochice 2 Jason 1 2012   Pima 2 Molly 2 2012   Santa Cruz 3 Tina 1 2013   Maricopa 3 Jake 2 2014   Yuma 3 Amy 3 2014     Sort the dataframe&amp;rsquo;s rows by reports, in descending order df.</description>
    </item>
    
    <item>
      <title>Split Lat/Long Coordinate Variables Into Seperate Variables</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_split_lat_and_long_into_variables/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_split_lat_and_long_into_variables/</guid>
      <description>Preliminaries import pandas as pd import numpy as np Create an example dataframe raw_data = {&amp;#39;geo&amp;#39;: [&amp;#39;40.0024, -105.4102&amp;#39;, &amp;#39;40.0068, -105.266&amp;#39;, &amp;#39;39.9318, -105.2813&amp;#39;, np.nan]} df = pd.DataFrame(raw_data, columns = [&amp;#39;geo&amp;#39;]) df    geo     0 40.0024, -105.4102   1 40.0068, -105.266   2 39.9318, -105.2813   3 NaN     Split the geo variable into seperate lat and lon variables # Create two lists for the loop results to be placed lat = [] lon = [] # For each row in a varible, for row in df[&amp;#39;geo&amp;#39;]: # Try to, try: # Split the row by comma and append # everything before the comma to lat lat.</description>
    </item>
    
    <item>
      <title>Stacked Percentage Bar Plot In MatPlotLib</title>
      <link>https://hampussanden.com/python/data_visualization/matplotlib_percentage_stacked_bar_plot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualization/matplotlib_percentage_stacked_bar_plot/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;pre_score&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;mid_score&amp;#39;: [25, 94, 57, 62, 70], &amp;#39;post_score&amp;#39;: [5, 43, 23, 23, 51]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;pre_score&amp;#39;, &amp;#39;mid_score&amp;#39;, &amp;#39;post_score&amp;#39;]) df    first_name pre_score mid_score post_score     0 Jason 4 25 5   1 Molly 24 94 43   2 Tina 31 57 23   3 Jake 2 62 23   4 Amy 3 70 51     Make plot # Create a figure with a single subplot f, ax = plt.</description>
    </item>
    
    <item>
      <title>Streaming Data Pipeline</title>
      <link>https://hampussanden.com/python/data_wrangling/streaming_data_pipeline/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/streaming_data_pipeline/</guid>
      <description> Create Some Raw Data raw_data = [1,2,3,4,5,6,7,8,9,10] Create Data Processing Functions # Define a generator that yields input+6 def add_6(numbers): for x in numbers: output = x+6 yield output # Define a generator that yields input-2 def subtract_2(numbers): for x in numbers: output = x-2 yield output # Define a generator that yields input*100  def multiply_by_100(numbers): for x in numbers: output = x*100 yield output Create Data Pipeline # Step 1 of the pipeline step1 = add_6(raw_data) # Step 2 of the pipeline step2 = subtract_2(step1) # Step 3 of the pipeline pipeline = multiply_by_100(step2) Send First Two Pieces Of Raw Data Through Pipeline # First element of the raw data next(pipeline) 500  # Second element of the raw data next(pipeline) 600  Send All Raw Data Through Pipeline # Process all data for raw_data in pipeline: print(raw_data) 700 800 900 1000 1100 1200 1300 1400  </description>
    </item>
    
    <item>
      <title>String Munging In Dataframe</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_string_munging/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_string_munging/</guid>
      <description>import modules import pandas as pd import numpy as np import re as re Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;email&amp;#39;: [&amp;#39;jas203@gmail.com&amp;#39;, &amp;#39;momomolly@gmail.com&amp;#39;, np.NAN, &amp;#39;battler@milner.com&amp;#39;, &amp;#39;Ames1234@yahoo.com&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;email&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name email preTestScore postTestScore     0 Jason Miller jas203@gmail.</description>
    </item>
    
    <item>
      <title>Using List Comprehensions With pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_list_comprehension/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_list_comprehension/</guid>
      <description>Preliminaries # Import modules import pandas as pd # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create an example dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df   .dataframe thead tr:only-child th { text-align: right; } .</description>
    </item>
    
    <item>
      <title>Using Seaborn To Visualize A pandas Dataframe</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_with_seaborn/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_with_seaborn/</guid>
      <description>Preliminaries import pandas as pd %matplotlib inline import random import matplotlib.pyplot as plt import seaborn as snsdf = pd.DataFrame() df[&amp;#39;x&amp;#39;] = random.sample(range(1, 100), 25) df[&amp;#39;y&amp;#39;] = random.sample(range(1, 100), 25)df.head()    x y     0 18 25   1 42 67   2 52 77   3 4 34   4 14 69     Scatterplot sns.lmplot(&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;, data=df, fit_reg=False) &amp;lt;seaborn.</description>
    </item>
    
    <item>
      <title>pandas Data Structures</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_data_structures/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_data_structures/</guid>
      <description>Import modules import pandas as pd Series 101 Series are one-dimensional arrays (like R&amp;rsquo;s vectors)
Create a series of the number of floodingReports floodingReports = pd.Series([5, 6, 2, 9, 12]) floodingReports 0 5 1 6 2 2 3 9 4 12 dtype: int64  Note that the first column of numbers (0 to 4) are the index.
Set county names to be the index of the floodingReports series floodingReports = pd.</description>
    </item>
    
    <item>
      <title>pandas Time Series Basics</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_time_series_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_time_series_basics/</guid>
      <description>Import modules from datetime import datetime import pandas as pd %matplotlib inline import matplotlib.pyplot as pyplot Create a dataframe data = {&amp;#39;date&amp;#39;: [&amp;#39;2014-05-01 18:47:05.069722&amp;#39;, &amp;#39;2014-05-01 18:47:05.119994&amp;#39;, &amp;#39;2014-05-02 18:47:05.178768&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.280592&amp;#39;, &amp;#39;2014-05-03 18:47:05.332662&amp;#39;, &amp;#39;2014-05-03 18:47:05.385109&amp;#39;, &amp;#39;2014-05-04 18:47:05.436523&amp;#39;, &amp;#39;2014-05-04 18:47:05.486877&amp;#39;], &amp;#39;battle_deaths&amp;#39;: [34, 25, 26, 15, 15, 14, 26, 25, 62, 41]} df = pd.DataFrame(data, columns = [&amp;#39;date&amp;#39;, &amp;#39;battle_deaths&amp;#39;]) print(df)  date battle_deaths 0 2014-05-01 18:47:05.069722 34 1 2014-05-01 18:47:05.</description>
    </item>
    
    <item>
      <title>What I Learned Tracking My Time At Techstars</title>
      <link>https://hampussanden.com/articles/what_i_learned_from_tracking_my_time_at_techstars/</link>
      <pubDate>Mon, 01 Feb 2016 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/articles/what_i_learned_from_tracking_my_time_at_techstars/</guid>
      <description>In the fall of 2015, New Knowledge, I cofounded with two friends was offered a slot in the 2016 class of Techstars Cloud. Like most people in tech, I had heard about Techstars, but in truth I barely knew anything specific, particularly about the day-to-day of the program. Was Techstars a permanent hackathon fueled by Soylent and Adderall? Was it three months of guest speakers and sponsored happy hours? I watched Techstars&amp;rsquo;s promotional videos, but the only impression I could glean was that all the founders worked 36 hours per day while having ample spare time to ride bikes around downtown Boulder.</description>
    </item>
    
  </channel>
</rss>