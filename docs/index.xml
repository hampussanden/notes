<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hampus Sandén</title>
    <link>https://hampussanden.com/</link>
    <description>Recent content on Hampus Sandén</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Aug 2020 11:53:49 +0200</lastBuildDate>
    
	<atom:link href="https://hampussanden.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Split A List Into Evenly Sized Chunks</title>
      <link>https://hampussanden.com/python/data_wrangling/split_a_list_into_evenly_sized_chunks/</link>
      <pubDate>Thu, 20 Aug 2020 11:53:49 +0200</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/split_a_list_into_evenly_sized_chunks/</guid>
      <description>In this snippet we will take a list of arbitrary length and split it up into equal size chunks. It is very common that you will have to do this when working with APIs that have a maximum request size. The most elegant way to do this in python is to use a generator function that will keep slicing your list into another list of given size.
This function differs from a regular function, because we are using the yield keyword which enables the function to comeback where it left off when it is called again.</description>
    </item>
    
    <item>
      <title>Ping Website</title>
      <link>https://hampussanden.com/linux/basics/ping_website/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 -0700</pubDate>
      
      <guid>https://hampussanden.com/linux/basics/ping_website/</guid>
      <description>Linux makes it easy to ping a website to test connectivity and/or whether the website is live. Once executed, ping will ping the website until it is stopped by pressing ctrl-C.
Ping Google.com ping google.com PING google.com (216.58.211.142) 56(84) bytes of data. 64 bytes from arn09s10-in-f142.1e100.net (216.58.211.142): icmp_seq=1 ttl=56 time=8.90 ms 64 bytes from arn09s10-in-f142.1e100.net (216.58.211.142): icmp_seq=2 ttl=56 time=12.9 ms 64 bytes from arn09s10-in-f142.1e100.net (216.58.211.142): icmp_seq=3 ttl=56 time=9.08 ms 64 bytes from arn09s10-in-f142.</description>
    </item>
    
    <item>
      <title>About Hampus Sandén</title>
      <link>https://hampussanden.com/about/hampus_sanden/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/about/hampus_sanden/</guid>
      <description>About Hampus Sandén My name is Hampus Sandén and I work as a data analyst at a digital marketing firm in Stockholm, Sweden. In my day to day work i work with all products that are included in the Google Marketing Platform- and Google Cloud stack.
I grew up in a small town in southern Sweden called Kristianstad and have a background in digital marketing and web development. I’ve been programming actively since 2008, and I built my first website/blog that same year.</description>
    </item>
    
    <item>
      <title>Applying Functions To List Items</title>
      <link>https://hampussanden.com/python/basics/applying_functions_to_list_items/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/basics/applying_functions_to_list_items/</guid>
      <description>Sometimes you want to transform your lists items and there is a couple of ways to do that. Below are three examples of how you would apply a function function that capitalizes characters from [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] to [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;].
In the first example we are using a simple for loop to iterate over each character in the list item. In the second example we are using the built in map() function which iterates over the list with str.</description>
    </item>
    
    <item>
      <title>Pie Chart In MatPlotLib</title>
      <link>https://hampussanden.com/python/data_visualisation/matplotlib_pie_chart/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_visualisation/matplotlib_pie_chart/</guid>
      <description>Import modules import matplotlib.pyplot as plt %matplotlib inline Make a Pie Chart plot # Create a pie chart labels = [&amp;#39;Java&amp;#39;, &amp;#39;Python&amp;#39;, &amp;#39;JavaScript&amp;#39;, &amp;#39;C++&amp;#39;] sizes = [504, 337, 415, 280] plt.pie(# Using variable sizes for wedge-sizes sizes, # Using variable labels for wedge-labels labels=labels, # With no shadows shadow=False, # With one slide exploded out eg. Python explode=(0, 0.1, 0, 0), # With the start angle at 90% startangle=90, # With the percent listed as a fraction autopct=&amp;#39;%1.</description>
    </item>
    
    <item>
      <title>Read/Import A CSV File Using Pandas</title>
      <link>https://hampussanden.com/python/data_wrangling/pandas_dataframe_importing_csv/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://hampussanden.com/python/data_wrangling/pandas_dataframe_importing_csv/</guid>
      <description>Import modules import pandas as pd Create dataframe (that we will be importing) raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#34;.&amp;#34;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, &amp;#34;.&amp;#34;, &amp;#34;.&amp;#34;], &amp;#39;postTestScore&amp;#39;: [&amp;#34;25,000&amp;#34;, &amp;#34;94,000&amp;#34;, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .</description>
    </item>
    
  </channel>
</rss>